#最好把互动的important_action都集中在一个文件里

action_call_vassal_to_war_interaction = {
	priority = 900
	combine_into_one = yes
	check_create_action = {
		ordered_vassal = {
			limit = {
				root = {
					is_character_interaction_shown = {
						recipient = prev
						interaction = call_vassal_to_war_interaction
					}
					is_character_interaction_valid = {
						recipient = prev
						interaction = call_vassal_to_war_interaction
					}
				}
			}
			order_by = this.max_military_strength
			max = 999
			check_range_bounds = no
			try_create_important_action = {
				important_action_type = action_call_vassal_to_war_interaction
				actor = root
				recipient = this
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = call_vassal_to_war_interaction
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}

action_change_vassal_legion_interaction = {
	priority = 900
	combine_into_one = yes
	check_create_action = {
		every_vassal = {
			limit = {
				root = {
					is_character_interaction_shown = {
						recipient = prev
						interaction = change_vassal_legion_interaction
					}
					is_character_interaction_valid = {
						recipient = prev
						interaction = change_vassal_legion_interaction
					}
					OR = {
						has_strong_hook = prev
						prev = { is_imprisoned_by = root }
					}
				}
			}
			try_create_important_action = {
				important_action_type = action_change_vassal_legion_interaction
				actor = root
				recipient = this
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = change_vassal_legion_interaction
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}

action_change_vassal_bureau_interaction = {
	priority = 901
	combine_into_one = yes
	check_create_action = {
		every_vassal = {
			limit = {
				root = {
					is_character_interaction_shown = {
						recipient = prev
						interaction = change_vassal_bureau_interaction
					}
					is_character_interaction_valid = {
						recipient = prev
						interaction = change_vassal_bureau_interaction
					}
					OR = {
						has_strong_hook = prev
						prev = { is_imprisoned_by = root }
					}
				}
			}
			try_create_important_action = {
				important_action_type = action_change_vassal_bureau_interaction
				actor = root
				recipient = this
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = change_vassal_bureau_interaction
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}

action_change_vassal_official_succession = {
	priority = 902
	combine_into_one = yes
	check_create_action = {
		every_vassal = {
			limit = {
				root = {
					is_character_interaction_shown = {
						recipient = prev
						interaction = change_vassal_official_succession
					}
					is_character_interaction_valid = {
						recipient = prev
						interaction = change_vassal_official_succession
					}
					OR = {
						has_strong_hook = prev
						prev = { is_imprisoned_by = root }
					}
				}
			}
			try_create_important_action = {
				important_action_type = action_change_vassal_official_succession
				actor = root
				recipient = this
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = change_vassal_official_succession
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}

action_change_vassal_heir_succession = {
	priority = 902
	combine_into_one = yes
	check_create_action = {
		every_vassal = {
			limit = {
				root = {
					is_character_interaction_shown = {
						recipient = prev
						interaction = change_vassal_heir_succession
					}
					is_character_interaction_valid = {
						recipient = prev
						interaction = change_vassal_heir_succession
					}
					OR = {
						has_strong_hook = prev
						prev = { is_imprisoned_by = root }
					}
				}
			}
			try_create_important_action = {
				important_action_type = action_change_vassal_heir_succession
				actor = root
				recipient = this
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = change_vassal_heir_succession
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}

action_summon_sb_to_be_vassal_interaction = {
	priority = 903
	combine_into_one = yes
	check_create_action = {
		every_character_war = {
			limit = {
				using_cb = revolt_independence_war
			}
			if = {
				limit = {
					root = this.primary_attacker
				}
				this.primary_defender = { save_scope_as = other_side }
			}
			else = {
				this.primary_attacker = { save_scope_as = other_side }
			}
			scope:other_side = {
				every_vassal = {
					limit = {
						root = {
							is_character_interaction_shown = {
								recipient = prev
								interaction = summon_sb_to_be_vassal_interaction
							}
							is_character_interaction_valid = {
								recipient = prev
								interaction = summon_sb_to_be_vassal_interaction
							}
						}
					}
					try_create_important_action = {
						important_action_type = action_summon_sb_to_be_vassal_interaction
						actor = root
						recipient = this
					}
				}
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = summon_sb_to_be_vassal_interaction
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}

action_revolt_liege_to_be_enemy_vassal_interaction = {
	priority = 903
	combine_into_one = yes
	check_create_action = {
		every_liege_or_above = {
			save_scope_as = liege_temp
			every_character_war = {
				limit = {
					OR = {
						using_cb = revolt_independence_war
						#using_cb = steppe_war
						#using_cb = unite_war
					}
				}
				if = {
					limit = {
						scope:liege_temp = {
							is_attacker_in_war = prev
						}
					}
					this.primary_defender = { save_scope_as = receiver }
				}
				else = {
					this.primary_attacker = { save_scope_as = receiver }
				}
				if = {
					limit = {
						root = {
							is_character_interaction_shown = {
								recipient = scope:receiver
								interaction = revolt_liege_to_be_enemy_vassal_interaction
							}
							is_character_interaction_valid = {
								recipient = scope:receiver
								interaction = revolt_liege_to_be_enemy_vassal_interaction
							}
						}
					}
					try_create_important_action = {
						important_action_type = action_revolt_liege_to_be_enemy_vassal_interaction
						actor = root
						recipient = scope:receiver
					}
				}
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = revolt_liege_to_be_enemy_vassal_interaction
			actor = scope:actor
			recipient = scope:receiver
		}
	}
}

action_bureaucrat_ranking = {
	type = tutorial
	icon = generic_reactive_advice
	check_create_action = {
		if = {
			limit = {
				is_oe_landed_bureaucrat_trigger = yes
				bureaucracy_exp_rank = 1
				bureaucrat_title_rank_5 = no
			}
			try_create_important_action = {
				important_action_type = action_bureaucrat_ranking
				actor = root
			}
		}
	}

	effect = {
		scope:actor = {
			open_view_data = {
				view = character
			}
		}
		start_tutorial_lesson = action_bureaucrat_ranking
	}
}

action_bureaucrat_heir = {
	type = tutorial
	icon = generic_reactive_advice
	check_create_action = {
		if = {
			limit = {
				is_oe_landed_bureaucrat_trigger = yes
				exists = player_heir
				player_heir = {
					NOT = {
						any_held_title = {
							tier > tier_barony
						}
					}
				}
			}
			try_create_important_action = {
				important_action_type = action_bureaucrat_heir 
				actor = root
			}
		}
	}

	effect = {
		scope:actor = {
			open_view_data = {
				view = character
			}
		}
		start_tutorial_lesson = reactive_advice_bureaucrat_game_over
	}
}


action_oe_info = {
	priority = 200
	combine_into_one = yes
	icon = generic_reactive_advice
	soundeffect = "event:/SFX/UI/Notifications/TopBar/sfx_ui_notifications_topbar_reactive_advice"
	check_create_action = {
		if = {
			limit = {	
				is_ai = no
			}
			try_create_important_action = {
				important_action_type = action_oe_info
				actor = root
				recipient = this
			}
		}
	}
	unimportant = {
	}
	effect = {
		open_view = decisions
		trigger_event = oe_info.001
	}
}