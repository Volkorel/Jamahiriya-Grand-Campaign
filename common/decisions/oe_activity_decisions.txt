#觐见
pay_homage_decision = {
	ai_check_interval = 45
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_knight_kneeling.dds"
	}
	decision_group_type = major

	cost = {
		prestige = standard_activity_cost
		gold = {
			value = 0
			if = {
				limit = {
					exists = scope:pay_homage_gold
					scope:pay_homage_gold = yes
				}
				add = medium_gold_value
			}
		}
	}

	is_shown = {
		is_landed = yes
		primary_title.tier >= tier_county
		is_independent_ruler = no
		exists = liege
		liege = { has_royal_court = yes }
		OR = {
			government_has_flag = government_is_feudal
			government_has_flag = government_is_clan
			government_has_flag = government_is_celestial
			government_has_flag = government_is_ulus
		}
	}

	is_valid = {
		custom_tooltip = {
			text = pay_homage_grace_valid_tt
			trigger_if = { # Has not paid homage to this liege before
				limit = {
					has_variable = pay_homage_grace
					exists = liege
				}
				NOT = { var:pay_homage_grace = liege }
			}
		}

	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
		liege = { is_available_adult = yes }
		is_at_war_with_liege = no
		trigger_if = {
			limit = {
				is_ai = no
				has_royal_court = yes
			}
			has_spawned_court_events = no # should only be used for human players
		}
		trigger_if = { # Has not paid homage to this liege before
			limit = { 
				has_variable = pay_homage_grace
				exists = liege
			}
			custom_tooltip = {
				text = pay_homage_grace_tt
				NOT = { var:pay_homage_grace = liege }
			}
		}
		trigger_if = {
			limit = { is_ai = yes }
			NOT = {
				liege = { has_variable = pay_homage_cooldown }
			}
		}
	}

	widget = {
		gui = "decision_view_widget_pay_homage"
		controller = decision_option_list_controller
		decision_to_second_step_button = "PAY_HOMAGE_DECISION_NEXT_STEP_BUTTON"

		item = { # Submission
			value = pay_homage_submission
			is_valid = {}
			current_description = pay_homage_submission_desc
			localization = pay_homage_decision_option_submission
			icon = "gfx/interface/icons/icon_liege.dds"
			ai_chance = { # Always likely
				value = 50
				if = { # Generous vassals want to give gold if they can!
					limit = {
						ai_greed <= -50
						gold >= medium_gold_value
					}
					add = -50
				}
			}
		}

		item = { # Hook
			value = pay_homage_hook
			is_valid = {
				custom_tooltip = { # Liege does not already have a hook
					text = pay_homage_hook_tt
					NOT = {
						liege = { has_hook = prev } 
					}
				}
			}
			current_description = pay_homage_hook_desc
			localization = pay_homage_decision_option_hook
			icon = "gfx/interface/icons/message_feed/hook.dds"
			ai_chance = { # More likely if family
				value = 25
				if = {
					limit = { is_close_or_extended_family_of = liege }
					add = 25
				}
				if = { # Certain AI's really do not want to be indebted
					limit = {
						OR = {
							has_trait = paranoid
							has_trait = arrogant
							ai_greed >= 50
						}
					}
					add = -50
				}
			}
		}

		item = { # Contract
			value = pay_homage_contract
			is_shown = { government_has_flag = government_is_feudal }
			is_valid = {
				custom_tooltip = { # Contract can be changed
					text = pay_homage_contract_modifiable_tt
					vassal_contract_has_modifiable_obligations = yes
				}
				custom_tooltip = { # Contract not at highest
					text = pay_homage_contract_increasable_tt
					OR = {
						vassal_contract_obligation_level_can_be_increased = feudal_government_taxes
						vassal_contract_obligation_level_can_be_increased = feudal_government_levies
					}
				}
			}
			current_description = pay_homage_contract_desc
			localization = pay_homage_decision_option_contract
			icon = "gfx/interface/icons/message_feed/a_catch_all_councillor_icon.dds"
			ai_chance = { # More likely if contract is already lenient
				value = 10
				if = {
					limit = {
						OR = {
							vassal_contract_obligation_level:feudal_government_levies = feudal_levies_low_level
							vassal_contract_obligation_level:feudal_government_taxes = feudal_tax_low_level
						}
					}
					add = 40
				}
				else_if = {
					limit = {
						OR = {
							vassal_contract_obligation_level:feudal_government_levies = feudal_levies_exempt_level
							vassal_contract_obligation_level:feudal_government_taxes = feudal_tax_exempt_level
						}
					}
					add = 90
				}

				if = { # Certain AI's really do not want increased obligations
					limit = {
						OR = {
							has_trait = ambitious
							has_trait = arrogant
							ai_greed >= 50
						}
					}
					add = -50
				}
			}
		}

		item = { # Gold
			value = pay_homage_gold
			is_valid = {
				custom_tooltip = { # Can afford gold homage
					text = pay_homage_gold_tt
					gold >= medium_gold_value # Can afford gold homage
				}
			}
			current_description = pay_homage_gold_desc
			localization = pay_homage_decision_option_gold
			icon = "gfx/interface/icons/message_feed/money.dds"
			ai_chance = { # More likely if rich
				value = 50
				if = {
					limit = { gold > major_gold_value }
					add = 50
				}
				
				if = { # Certain AI's really do not want to part with gold
					limit = {
						ai_greed >= 50
					}
					add = -100
				}
			}
		}
	}

	effect = {
		set_variable = {
			name = homage_liege_scope
			value = liege
		}
		custom_tooltip = pay_homage_decision_effects
		custom_description_no_bullet = { text = pay_homage_gift_warning_effect }
		if = { # Gift
			limit = { scope:pay_homage_gold = yes }
			set_variable = {
				name = homage_type
				value = flag:homage_gold
			}
			# used for refunding if travel is canceled mid-way
			set_variable = {
				name = pay_homage_gold_value 
				value = medium_gold_value
			}
			custom_tooltip = pay_homage_decision_effects_gold
		}
		else_if = { # Hook
			limit = { scope:pay_homage_hook = yes }
			set_variable = {
				name = homage_type
				value = flag:homage_hook
			}
			custom_tooltip = pay_homage_decision_effects_hook
		}
		else_if = { # Contract
			limit = { scope:pay_homage_contract = yes }
			set_variable = {
				name = homage_type
				value = flag:homage_contract
			}
			if = {
				limit = {
					vassal_contract_obligation_level:feudal_government_levies < vassal_contract_obligation_level:feudal_government_taxes
					vassal_contract_obligation_level_can_be_increased = feudal_government_levies
				}
				custom_tooltip = pay_homage_decision_effects_contract_levies
			}
			else_if = {
				limit = {
					vassal_contract_obligation_level:feudal_government_taxes < vassal_contract_obligation_level:feudal_government_levies
					vassal_contract_obligation_level_can_be_increased = feudal_government_taxes
				}
				custom_tooltip = pay_homage_decision_effects_contract_gold
			}
			else = {
				if = {
					limit = { vassal_contract_obligation_level_can_be_increased = feudal_government_taxes }
					custom_tooltip = pay_homage_decision_effects_contract_gold
				}
				else = { custom_tooltip = pay_homage_decision_effects_contract_gold }
			}			
			hidden_effect = { set_vassal_contract_modification_blocked = yes }
		}
		else = { # Submission
			set_variable = {
				name = homage_type
				value = flag:homage_submission
			}
		}
		show_as_tooltip = {
			switch = {
				trigger = has_trait
				shy = { add_stress = medium_stress_impact_gain }
				arrogant = { add_stress = medium_stress_impact_gain }
			}
		}
		save_scope_as = homage_vassal
		if = {
			limit = { exists = liege } # To stop errors
			liege = { save_scope_as = homage_liege }
		}
		start_travel_plan = {
			destination = liege.capital_province
			on_start_on_action = pay_homage_start
			on_travel_planner_cancel_on_action = pay_homage_travel_planner_exit
			on_arrival_event = pay_homage.9999
			on_arrival_destinations = all_but_last
		}
	}
	
	ai_potential = {
		is_at_war = no
	}

	ai_will_do = {
		base = 0
		modifier = {
			add = 50
			prestige > standard_activity_cost
		}
		modifier = { # AI's who can give gold are more likely
			add = 50
			gold >= medium_gold_value
			ai_greed < 50
			primary_title.tier > tier_county
		}
		modifier = {
			add = -50
			has_relation_rival = liege
		}
		modifier = {
			add = -25
			opinion = {
				target = liege
				value < 0
			}
		}
		modifier = { # Dukes/kings should be more weighted
			add = 25
			primary_title.tier >= tier_duchy
		}
		modifier = { # Barons should be less weighted
			add = -25
			primary_title.tier < tier_county
		}
	}
}

#请愿
oe_petition_liege_decision = {
	ai_check_interval = 0
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_knight_kneeling.dds"
	}
	decision_group_type = major
	sort_order = 120

	cost = {
		prestige = {
			value = standard_activity_cost
			multiply = 3
		}
		gold = {
			value = 0
			if = {
				limit = {
					exists = scope:pay_homage_gold
					scope:pay_homage_gold = yes
				}
				add = medium_gold_value
			}
		}
	}

	cooldown = {
		days = standard_petition_liege_cooldown_time
	}

	is_shown = {
		is_ai = no
		is_landed = yes
		is_independent_ruler = no
		is_available_adult = yes
	}

	is_valid_showing_failures_only = {
		NOT = { is_at_war_with = top_liege }
		top_liege = { has_royal_court = yes }
		top_liege = { is_available_adult = yes }
		custom_tooltip = {
			text = petition_liege_council_no_petition_valid_tt
			OR = {
				AND = {
					scope:ask_for_bureaucrat_position = yes
					is_oe_landed_bureaucrat_trigger = yes
				}
				AND = {
					scope:convert_to_milita = yes
					is_milita_government_trigger = no
				}
				AND = {
					scope:transfer_to_legion = yes
					vassal_contract_has_flag = imperial_contract_1
					NOT = { vassal_contract_has_flag = imperial_legion_2 }
				}
				AND = {
					scope:heir_succession = yes
					vassal_contract_has_flag = imperial_contract_1
					has_realm_law = player_official_succession_law
				}
			}
		}
		trigger_if = { # 讨官
			limit = { scope:ask_for_bureaucrat_position = yes }
				custom_tooltip = { #
					text = has_official_succession_law_tt
					OR = {
						has_realm_law = official_succession_law
						has_realm_law = player_official_succession_law
					}
				}
				custom_tooltip = {
					text = has_unlanded_adult_son_tt
					any_child = {
						is_alive = yes
						is_adult = yes
						is_male = yes
						is_landed = no
					}
				}
		}
		trigger_if = { # 请设军府
			limit = { scope:convert_to_milita = yes }
			custom_tooltip = {
				text = IS_MILITA
				is_milita_government_trigger = no
			}
			custom_tooltip = {
				text = prestige_level_3_tt	
				OR = {
					prestige_level >= 3
					dynasty = { dynasty_prestige_level >= 2 }
				}
			}
			custom_tooltip = { 
				text = perks_in_martial_lifestyle_10
				perks_in_martial_lifestyle >= 10
			}
		}
		trigger_if = { # 请设方镇
			limit = { scope:transfer_to_legion = yes }
			custom_tooltip = {
				text = IS_LEGION
				vassal_contract_has_flag = imperial_contract_1
				NOT = { vassal_contract_has_flag = imperial_legion_2 }
			}
			custom_tooltip = { 
				text = perstige_level_5_tt
				OR = {
					is_powerful_vassal = yes
					prestige_level >= 3
				}
			}
			custom_tooltip = {
				text = perks_in_martial_lifestyle_20
				perks_in_martial_lifestyle >= 20
			}
		}
		trigger_if = { # 留后册命
			limit = { scope:heir_succession = yes }
			has_realm_law = player_official_succession_law
			custom_tooltip = {
				text = IS_LEGION
				vassal_contract_has_flag = imperial_contract_1
			}
			custom_tooltip = { 
				text = perstige_level_5_tt
				OR = {
					is_powerful_vassal = yes
					prestige_level >= 3
				}
			}
			custom_tooltip = {
				text = perks_in_martial_lifestyle_20
				perks_in_martial_lifestyle >= 20
			}
		}
	}

	widget = {
		gui = "decision_view_widget_petition_liege"
		controller = decision_option_list_controller
		decision_to_second_step_button = "CHOOSE_PETITION_DECISION_NEXT_STEP_BUTTON"

		item = { # 讨官
			value = ask_for_bureaucrat_position
			is_valid = {
				custom_tooltip = { #
					text = has_official_succession_law_tt
					OR = {
						has_realm_law = official_succession_law
						has_realm_law = player_official_succession_law
					}
				}
				custom_tooltip = {
					text = has_unlanded_adult_son_tt
					any_child = {
						is_alive = yes
						is_adult = yes
						is_male = yes
						is_landed = no
					}
				}
			}
			current_description = ask_for_bureaucrat_position_desc
			localization = ask_for_bureaucrat_position
			icon = "gfx/interface/icons/message_feed/faction.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		item = { # 请设军府
			value = convert_to_milita
			is_valid = {
				custom_tooltip = {
					text = prestige_level_3_tt	
					OR = {
						prestige_level >= 3
						dynasty = { dynasty_prestige_level >= 2 }
					}
				}
				custom_tooltip = { 
					text = perks_in_martial_lifestyle_10
					perks_in_martial_lifestyle >= 10
				}
			}
			current_description = convert_to_milita_contract_decision_desc
			localization = convert_to_milita_contract_decision
			icon = "gfx/interface/illustrations/decisions/decision_realm.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		item = { # 请设方镇
			value = transfer_to_legion
			is_valid = {
				custom_tooltip = { 
					text = perstige_level_5_tt
					OR = {
						is_powerful_vassal = yes
						prestige_level >= 3
					}
				}
				#custom_tooltip = {
					#text = perks_in_martial_lifestyle_20
					#perks_in_martial_lifestyle >= 20
				#}
			}
			
			current_description = transfer_to_legion_contract_decision_desc
			localization = transfer_to_legion_contract_decision
			icon = "gfx/interface/illustrations/decisions/decision_realm.dds"
			ai_chance = { value = 0 } # Currently unused
		}
		item = { # 留后册命
			value = heir_succession
			is_valid = {
				custom_tooltip = { 
					text = perstige_level_5_tt
					OR = {
						is_powerful_vassal = yes
						prestige_level >= 3
					}
				}
				#custom_tooltip = {
					#text = perks_in_martial_lifestyle_20
					#perks_in_martial_lifestyle >= 20
				#}
			}
			
			current_description = heir_succession_desc
			localization = heir_succession
			icon = "gfx/interface/illustrations/decisions/decision_realm.dds"
			ai_chance = { value = 0 } # Currently unused
		}
	}

	effect = {
		custom_tooltip = petition_liege_decision_effects
		if = {
			limit = {
				top_liege = { is_ai = yes }
			}
			custom_description_no_bullet = { text = petition_liege_warning_effect }
		}
		show_as_tooltip = {
			switch = {
				trigger = has_trait 
				shy = { add_stress = medium_stress_impact_gain }
				arrogant = { add_stress = medium_stress_impact_gain }
			}
		}
		if = { # 讨官
			limit = { scope:ask_for_bureaucrat_position = yes }
			set_variable = {
				name = petition_type
				value = flag:bureaucrat_position
			}
		}
		else_if = { # 请设军府
			limit = { scope:convert_to_milita = yes }
			set_variable = {
				name = petition_type
				value = flag:milita
			}
		}
		else_if = { # 请设方镇
			limit = { scope:transfer_to_legion = yes }
			set_variable = {
				name = petition_type
				value = flag:legion
			}
		}
		else_if = { # 留后册命
			limit = { scope:heir_succession = yes }
			set_variable = {
				name = petition_type
				value = flag:heir_succession
			}
		}
		top_liege = { save_scope_as = petition_liege }
		start_travel_plan = {
			destination = top_liege.capital_province
			on_start_on_action = oe_petition_liege_start
			on_travel_planner_cancel_on_action = oe_petition_liege_travel_planner_exit 
			on_arrival_event = oe_petition_liege.9000
			on_arrival_destinations = all_but_last
		}
	}
	
	ai_potential = {
		always = no # Only players can do this. AI vassals go through the normal court events/hold court activity.
	}
}